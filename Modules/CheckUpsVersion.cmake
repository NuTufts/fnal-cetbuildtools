# This macro is used by the FindUps modules
#internal macro
macro( _check_version product version minimum )
   # convert vx_y_z to x.y.z
   # must also recognize vx_y
   STRING( REGEX REPLACE "v(.*)_(.*)_(.*)" "\\1.\\2.\\3" MINVER "${minimum}" )
   STRING( REGEX REPLACE "v(.*)_(.*)_(.*)" "\\1" MINMAJOR "${minimum}" )
   STRING( REGEX REPLACE "v(.*)_(.*)_(.*)" "\\2" MINMINOR "${minimum}" )
   STRING( REGEX REPLACE "v(.*)_(.*)_(.*)" "\\3" MINPATCH "${minimum}" )
   STRING(REGEX MATCH [_] has_underscore ${MINVER})
     if( has_underscore )
       STRING( REGEX REPLACE "v(.*)_(.*)" "\\1.\\2" MINVER "${minimum}" )
       STRING( REGEX REPLACE "v(.*)_(.*)" "\\1" MINMAJOR "${minimum}" )
       STRING( REGEX REPLACE "v(.*)_(.*)" "\\2" MINMINOR "${minimum}" )
       set(MINPATCH 0)
     endif( has_underscore )
   STRING( REGEX REPLACE "v(.*)_(.*)_(.*)" "\\1.\\2.\\3" THISVER "${version}" )
   STRING( REGEX REPLACE "v(.*)_(.*)_(.*)" "\\1" THISMAJOR "${version}" )
   STRING( REGEX REPLACE "v(.*)_(.*)_(.*)" "\\2" THISMINOR "${version}" )
   STRING( REGEX REPLACE "v(.*)_(.*)_(.*)" "\\3" THISPATCH "${version}" )
   STRING(REGEX MATCH [_] has_underscore ${THISVER})
     if( has_underscore )
       STRING( REGEX REPLACE "v(.*)_(.*)" "\\1.\\2" THISVER "${version}" )
       STRING( REGEX REPLACE "v(.*)_(.*)" "\\1" THISMAJOR "${version}" )
       STRING( REGEX REPLACE "v(.*)_(.*)" "\\2" THISMINOR "${version}" )
       set(THISPATCH 0)
     endif( has_underscore )
   message(STATUS "${product} minimum version is ${MINVER} ${MINMAJOR} ${MINMINOR} ${MINPATCH} from ${minimum} " )
   message(STATUS "${product} version is ${THISVER} ${THISMAJOR} ${THISMINOR} ${THISPATCH} from ${version} " )
   if(  ${THISMAJOR} LESS ${MINMAJOR} )
       message( FATAL_ERROR "Bad Major Version: ${product} ${THISVER} is less than minimum required version ${MINVER}")
   endif()
   if(  ${THISMINOR} LESS ${MINMINOR} )
       message( FATAL_ERROR "Bad Minor Version: ${product} ${THISVER} is less than minimum required version ${MINVER}")
   endif()
   if(  ${THISPATCH} LESS ${MINPATCH} )
       message( FATAL_ERROR "Bad Patch Version: ${product} ${THISVER} is less than minimum required version ${MINVER}")
   endif()
   message( STATUS "${product} ${THISVER} meets minimum required version ${MINVER}")
endmacro( _check_version product version minimum )

macro(_holding_pattern)

   if(  ${THISVER} STRGREATER ${MINVER} )
     message( STATUS "${product} ${THISVER} meets minimum required version ${MINVER}")
   else()
     if(  ${THISVER} EQUAL ${MINVER} )
       message( STATUS "${product} ${THISVER} meets minimum required version ${MINVER}")
     else()
       message( FATAL_ERROR "${product} ${THISVER} is less than minimum required version ${MINVER}")
     endif()
   endif()
   if(  ${THISVER} STRLESS ${MINVER} )
       message( FATAL_ERROR "${product} ${THISVER} is less than minimum required version ${MINVER}")
   else()
       message( STATUS "${product} ${THISVER} meets minimum required version ${MINVER}")
   endif()
endmacro(_holding_pattern)

