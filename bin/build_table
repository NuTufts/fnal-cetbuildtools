#!/bin/env perl
#
# use product_deps and qualifier_deps

use File::Basename;
use lib dirname($0);

require parse_deps;

$pfile="product_deps";
$qfile="qualifier_deps";

($product, $version, %phash) = parse_product_list( $pfile );
($ndeps, @qlist) = parse_qualifier_list( $product, $version, $qfile );

print "creating table file for $product $version\n";

$table = $product.".table";
open(TBL, "> $table") or die "Couldn't open $table";
create_table_top();
create_quals();
create_table_bottom();
close(TBL);

exit 0;


sub create_table_top {
  print TBL "File    = table\n";
  print TBL "Product = $product\n";
  print TBL "\n";
  print TBL "# ---------------------------------------\n";
  print TBL "Group:\n";
  print TBL "\n";
  print TBL "  Flavor     = ANY\n";
  print TBL "  Qualifiers = \"\"\n";
  print TBL "\n";
  print TBL "  Action = SetRootSys\n";
  print TBL "    envSet(ROOTSYS,\${UPS_PROD_DIR}/\${UPS_PROD_FLAVOR})\n";
  print TBL "    envSet(ROOT_FQ,\${UPS_PROD_FLAVOR})\n";
  print TBL "\n";
  print TBL "  Action = ExtraSetup\n";
  print TBL "\n";

}

sub create_quals {
  foreach $i ( 1 .. $#qlist ) {
    @words = split(/:/,$qlist[$i][0]);
    $ql=$words[0];
    foreach $j ( 1 .. $#words ) {
      $ql = $ql."-".$words[$j];
    }
    print TBL "  Flavor     = ANY\n";
    print TBL "  Qualifiers = \"$qlist[$i][0]\"\n";
    print TBL "\n";
    print TBL "  Action = SetRootSys\n";
    print TBL "    envSet(ROOTSYS,\${UPS_PROD_DIR}/\${UPS_PROD_FLAVOR}-$ql)\n";
    print TBL "    envSet(ROOT_FQ,\${UPS_PROD_FLAVOR}-$ql)\n";
    print TBL "\n";
    print TBL "  Action = ExtraSetup\n";
    foreach $j ( 1 .. $ndeps ) {
      if ( $qlist[$i][$j] eq "-" ) {
      } elsif ( $qlist[$i][$j] eq "-nq-" ) {
        print TBL "    setupRequired( $qlist[0][$j] $phash{$qlist[0][$j]} )\n";
      } else {
        print TBL "    setupRequired( $qlist[0][$j] $phash{$qlist[0][$j]} -q $qlist[$i][$j] )\n";
      }
    }
    print TBL "\n";
  }
}

sub create_table_bottom {

  print TBL "\n";
  print TBL "Common:\n";
  print TBL "  Action = setup\n";
  print TBL "    setupEnv()\n";
  print TBL "    prodDir()\n";
  print TBL "    envSet(ROOT_VERSION, $version)\n";
  print TBL "    exeActionRequired(SetRootSys)\n";
  print TBL "\n";
  print TBL "    # define ROOT_INC if there is an appropriate include subdirectory\n";
  print TBL "    if    ( sh -c 'for dd in \${ROOT_FQ}/include;do [ -d \${UPS_PROD_DIR}/\$dd ] && exit;done;exit 1' )\n";
  print TBL "        prodDir( _INC, \${ROOT_FQ}/include )\n";
  print TBL "    else ()\n";
  print TBL "        execute( true, NO_UPS_ENV )\n";
  print TBL "    endif ( sh -c 'for dd in \${ROOT_FQ}/include;do [ -d \${UPS_PROD_DIR}/\$dd ] && exit;done;exit 1' )\n";
  print TBL "\n";
  print TBL "    # look for the lib subdirectory\n";
  print TBL "    if    ( sh -c 'for dd in \${ROOT_FQ}/lib;do [ -d \${UPS_PROD_DIR}/\$dd ] && exit;done;exit 1' )\n";
  print TBL "        pathPrepend(LD_LIBRARY_PATH, \${ROOTSYS}/lib )\n";
  print TBL "        pathPrepend(PYTHONPATH, \${ROOTSYS}/lib )\n";
  print TBL "    else ()\n";
  print TBL "        execute( true, NO_UPS_ENV )\n";
  print TBL "    endif ( sh -c 'for dd in \${ROOT_FQ}/lib;do [ -d \${UPS_PROD_DIR}/\$dd ] && exit;done;exit 1' )\n";
  print TBL "\n";
  print TBL "    # add the bin directory to the path if it exists\n";
  print TBL "    if    ( sh -c 'for dd in \${ROOT_FQ}/bin;do [ -d \${UPS_PROD_DIR}/\$dd ] && exit;done;exit 1' )\n";
  print TBL "        pathPrepend(PATH, \${ROOTSYS}/bin )\n";
  print TBL "    else ()\n";
  print TBL "        execute( true, NO_UPS_ENV )\n";
  print TBL "	execute( echo \"ERROR: root is not available for flavor qualifier \${UPS_PROD_FLAVOR} \${UPS_PROD_QUALIFIERS}\", UPS_ENV )\n";
  print TBL "    endif ( sh -c 'for dd in \${ROOT_FQ}/bin;do [ -d \${UPS_PROD_DIR}/\$dd ] && exit;done;exit 1' )\n";
  print TBL "\n";
  print TBL "    exeActionRequired(ExtraSetup)\n";
  print TBL "\n";
  print TBL "End:\n";
}
