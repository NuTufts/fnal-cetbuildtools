#!/usr/bin/env perl
#
# use product_deps

use File::Basename;
use lib dirname($0);

if( $#ARGV >= 0 ) {
   $inputdir = $ARGV[0];
   if( $#ARGV > 0 ) {
       $outputdir = $ARGV[1];
   } else {
       $outputdir = ".";
   }
} else {
    print "\n";
    print "ERROR: directory not specified\n";
    print "USAGE: build_table <input-directory> [output-directory]\n";
    print "       input-directory  = directory containing product_deps\n";
    print "\n";
    exit 1;
}


require parse_deps;

$pfile=$inputdir."/product_deps";
$flagfile=$outputdir."/cet_base_flags";
$have_flagfile = -e $flagfile;


$tmpfl = $outputdir."/table_diagnostics";
open(TERR, "> $tmpfl") or die "Couldn't open $tmpfl";
($product, $version, $default_ver, $default_qual, %phash) = parse_product_list( $pfile );
($ndeps, @qlist) = parse_qualifier_list( $pfile, TERR );
$have_fq = check_fq_dir( $pfile );
(%ohash) = find_optional_products( $pfile );
($have_fragment, @flist) = check_for_fragment( $pfile );

print "creating table file for $product $version\n";
$table = $outputdir."/".$product.".table";
open(TBL, "> $table") or die "Couldn't open $table";
create_table_top();
if ( $qlist[1][0] eq "-nq-"  ) {
  no_quals();
} else {
  create_quals();
}
create_table_bottom();
close(TBL);
close(TERR);

exit 0;


sub create_table_top {
  print TBL "File    = table\n";
  print TBL "Product = $product\n";
  print TBL "\n";
  print TBL "#*************************************************\n";
  print TBL "# Starting Group definition\n";
  print TBL "Group:\n";
  print TBL "\n";

}

sub no_quals {
  print TBL "Flavor     = ANY\n";
  print TBL "Qualifiers = \"\"\n";
  print TBL "\n";
  print TBL "  Action = GetProducts\n";
  foreach $i ( 1 .. $#qlist ) {
    foreach $j ( 1 .. $ndeps ) {
      if ( $qlist[$i][$j] eq "-" ) {
      } elsif ( $qlist[$i][$j] eq "-nq-" ) {
        if( $ohash{$qlist[0][$j]} eq "optional" ) {
          print TBL "    setupOptional( $qlist[0][$j] $phash{$qlist[0][$j]} )\n";
        } else {
          print TBL "    setupRequired( $qlist[0][$j] $phash{$qlist[0][$j]} )\n";
	}
      } elsif ( $qlist[$i][$j] eq "-b-" ) {
      } else {
        @qwords = split(/:/,$qlist[$i][$j]);
	$ql="+".$qwords[0];
	foreach $j ( 1 .. $#qwords ) {
	  $ql = $ql.":+".$qwords[$j];
	}
        if( $ohash{$qlist[0][$j]} eq "optional" ) {
          print TBL "    setupOptional( $qlist[0][$j] $phash{$qlist[0][$j]} -q $ql )\n";
        } else {
          print TBL "    setupRequired( $qlist[0][$j] $phash{$qlist[0][$j]} -q $ql )\n";
	}
      }
    }
  }
  print TBL "\n";
}

sub create_quals {
  foreach $i ( 1 .. $#qlist ) {
    @words = split(/:/,$qlist[$i][0]);
    $qdot=$words[0];
    foreach $j ( 1 .. $#words ) {
      $qdot = $qdot.".".$words[$j];
    }
    # skip this bit if $flagfile does not exist
    if ( $have_flagfile ) {
      my $cxxflag = "";
      my $cflag = "";
      foreach $j ( 0 .. $#words ) {
	if( $words[$j] eq "debug" ) {
           ($cxxflag,$cflag) = check_flags( $flagfile, $words[$j] );
	} elsif( $words[$j] eq "opt" ) {
           ($cxxflag,$cflag) = check_flags( $flagfile, $words[$j] );
	} elsif( $words[$j] eq "prof" ) {
           ($cxxflag,$cflag) = check_flags( $flagfile, $words[$j] );
	}
      }
      $cxxflag =~ s/;/ /g;
      $cflag =~ s/;/ /g;
    }
    print TBL "Flavor     = ANY\n";
    print TBL "Qualifiers = \"$qlist[$i][0]\"\n";
    print TBL "\n";
    if( $have_fq ) {
      print TBL "  Action = GetFQDir\n";
      print TBL "       # faking out unsetup\n";
      print TBL "       envSet( \${UPS_PROD_NAME_UC}_FQ, \"\" )\n";
      print TBL "       execute( \"get-directory-name subdir $qdot \${UPS_PROD_FLAVOR}\", NO_UPS_ENV, \${UPS_PROD_NAME_UC}_FQ )\n";
      print TBL "       fileTest( \${UPS_PROD_DIR}/\${\${UPS_PROD_NAME_UC}_FQ}, -d, \"\${UPS_PROD_DIR}/\${\${UPS_PROD_NAME_UC}_FQ} directory not found: SETUP ABORTED\")\n";
      print TBL "\n";
    }
    print TBL "  Action = GetProducts\n";
    if ( $have_flagfile ) {
      print TBL "    envSet( \${UPS_PROD_NAME_UC}_CXXFLAGS, \"$cxxflag\" )\n";
      print TBL "    envSet( \${UPS_PROD_NAME_UC}_CFLAGS, \"$cflag\" )\n";
    }
    foreach $j ( 1 .. $ndeps ) {
      if ( $qlist[$i][$j] eq "-" ) {
      } elsif ( $qlist[$i][$j] eq "-nq-" ) {
        if( $ohash{$qlist[0][$j]} eq "optional" ) {
          print TBL "    setupOptional( $qlist[0][$j] $phash{$qlist[0][$j]} )\n";
        } else {
          print TBL "    setupRequired( $qlist[0][$j] $phash{$qlist[0][$j]} )\n";
	}
      } elsif ( $qlist[$i][$j] eq "-b-" ) {
      } else {
        @qwords = split(/:/,$qlist[$i][$j]);
	$ql="+".$qwords[0];
	foreach $j ( 1 .. $#qwords ) {
	  $ql = $ql.":+".$qwords[$j];
	}
        if( $ohash{$qlist[0][$j]} eq "optional" ) {
          print TBL "    setupOptional( $qlist[0][$j] $phash{$qlist[0][$j]} -q $ql )\n";
        } else {
          print TBL "    setupRequired( $qlist[0][$j] $phash{$qlist[0][$j]} -q $ql )\n";
	}
      }
    }
    print TBL "\n";
  }
}

sub table_ld_library {

  print TBL "    if ( test \`uname\` = \"Darwin\" )\n";
  print TBL "      pathPrepend(DYLD_LIBRARY_PATH, \${\${UPS_PROD_NAME_UC}_LIB})\n";
  print TBL "    else()\n";
  print TBL "      pathPrepend(LD_LIBRARY_PATH, \${\${UPS_PROD_NAME_UC}_LIB})\n";
  print TBL "    endif ( test \`uname\` = \"Darwin\" )\n";

}

sub create_table_bottom {

  $include_directory = get_include_directory( $pfile );
  $lib_directory = get_lib_directory( $pfile );
  $fcl_directory = get_fcl_directory( $pfile );
  $bin_directory = get_bin_directory( $pfile );

  $pvername = $product."_VERSION";
  print TBL "\n";
  print TBL "Common:\n";
  print TBL "  Action = setup\n";
  print TBL "    prodDir()\n";
  print TBL "    setupEnv()\n";
  print TBL "    envSet(\${UPS_PROD_NAME_UC}_VERSION, $version)\n";
  print TBL "    # cetpkgsupport has get-directory-name and find-path\n";
  print TBL "    setupRequired(cetpkgsupport)\n";
  if( $have_fq ) {
  print TBL "    exeActionRequired(GetFQDir)\n";
  print TBL "    prodDir( _FQ_DIR, \${\${UPS_PROD_NAME_UC}_FQ} )\n";
  }
  if( $include_directory eq "default" ) {
  print TBL "    envSet(\${UPS_PROD_NAME_UC}_INC, \${UPS_PROD_DIR}/include) \n";
  } elsif ( $include_directory eq "none" )   {
  } else {
  print TBL "    envSet(\${UPS_PROD_NAME_UC}_INC, $include_directory) \n";
  }
  if( $lib_directory eq "default" ) {
  print TBL "    envSet(\${UPS_PROD_NAME_UC}_LIB, \${\${UPS_PROD_NAME_UC}_FQ_DIR}/lib) \n";
  table_ld_library();
  print TBL "\n";
  } elsif ( $lib_directory eq "none" )   {
  } else {
  print TBL "    envSet(\${UPS_PROD_NAME_UC}_LIB, $lib_directory) \n";
  table_ld_library();
  print TBL "\n";
  }
  if( $fcl_directory eq "default" ) {
  print TBL "    # add the fcl directory to the fhicl file path\n";
  print TBL "    pathPrepend(FHICL_FILE_PATH, \${UPS_PROD_DIR}/fcl )\n";
  print TBL "    # dropit -E removes non-existent directories\n";
  print TBL "    Execute("dropit -p $FHICL_FILE_PATH -E", NO_UPS_ENV, FHICL_FILE_PATH)\n";
  print TBL "\n";
  } elsif ( $fcl_directory eq "none" )   {
  } else {
  print TBL "    # add the fcl directory to the path\n";
  print TBL "    pathPrepend(FHICL_FILE_PATH, $fcl_directory )\n";
  }
  if( $bin_directory eq "default" ) {
  print TBL "    # add the bin directory to the path\n";
  print TBL "    pathPrepend(PATH, \${\${UPS_PROD_NAME_UC}_FQ_DIR}/bin )\n";
  print TBL "    # dropit -E removes non-existent directories\n";
  print TBL "    Execute(dropit -E, NO_UPS_ENV, PATH)\n";
  print TBL "\n";
  } elsif ( $bin_directory eq "none" )   {
  } else {
  print TBL "    # add the bin directory to the path\n";
  print TBL "    pathPrepend(PATH, $bin_directory )\n";
  }
  print TBL "    exeActionRequired(GetProducts)\n";
  print TBL "\n";
  if( $have_fragment ) {
    foreach $i ( 0 .. $#flist ) {
       print TBL "$flist[$i]\n";
    }
  }
  print TBL "End:\n";
  print TBL "# End Group definition\n";
  print TBL "#*************************************************\n";
}
