#!/usr/bin/env perl
#
# setup products for the build environment
# use product_deps and qualifier_deps

# we need to know the qualifiers
# -d, -o, or -p and 1-2 other qualifiers

# cetbuildtools must already be setup by setup_for_development
# create a temporary file and return the temporary file name for use by setup_for_development

use File::Basename;
use lib dirname($0);

use parse_deps;

use strict;
use warnings;

my $default_fc = ( $^O eq "darwin" ) ? "-" : "gfortran";

my $compiler_table =
  {
   cc => { CC => "cc", CXX => "c++", FC => $default_fc },
   gcc => { CC => "gcc", CXX => "g++", FC => "gfortran" },
   icc => { CC => "icc", CXX => "icpc", FC => "ifort" },
  };
  
if( $#ARGV < 2 ) {
    my $errfl1 = "problem_report1";
    open(ERR1, "> $errfl1") or die "Couldn't open $errfl1";
    print ERR1 "\n";
    print ERR1 "unsetenv_ CETPKG_NAME\n";
    print ERR1 "unsetenv_ CETPKG_VERSION\n";
    print ERR1 "unsetenv_ CETPKG_QUAL\n";
    print ERR1 "unsetenv_ CETPKG_TYPE\n";
    print ERR1 "unsetenv_ CETPKG_CC\n";
    print ERR1 "unsetenv_ CETPKG_CXX\n";
    print ERR1 "unsetenv_ CETPKG_FC\n";
    print ERR1 "echo \"ERROR: directory and qualifiers not specified\"\n";
    print ERR1 "echo \"USAGE: set_dev_products <input-directory> <outupt-directory. <-d|-o|-p> <qualifiers>\"\n";
    print ERR1 "return 1\n";
    close(ERR1);
    print "$errfl1\n";
    exit 0;
}

my $i;
my $j;
my $k;

my $sourcedir = $ARGV[0];
my $builddir = $ARGV[1];
my $noarch = "";
my $qual = "";
my $dop = "";
my $type = "";
my $qdir = "";
my $inputdir;
my $setup_cmds;
my $input_qual = "";

for $i ( 2 .. $#ARGV ) {
    if( $ARGV[$i] eq "-d" ) {
      $dop = "debug";
      $type = "Debug";
    } elsif( $ARGV[$i] eq "-o" ) {
      $dop = "opt";
      $type = "Opt";
    } elsif( $ARGV[$i] eq "-p" ) {
      $dop = "prof";
      $type = "Prof";
    } elsif( $ARGV[$i] eq "noarch" ) {
      $noarch = "true";
      $type = "none"
    } else {
      #$qual = $qual.$ARGV[$i].":";
      #$qdir = $qdir.$ARGV[$i]."-";
      $input_qual = $input_qual.$ARGV[$i].":";
    }
}

# sort now

if ( $input_qual ) {
  $qual = sort_qual ( $input_qual );
  $qdir=$qual;
  $qdir =~ s/:/-/g;
}


# use this file for debugging
my $diagfl = $builddir."/diag_report";
open(DIAG, "> $diagfl") or die "Couldn't open $diagfl";

my $srcbase = basename($sourcedir);
if ( $srcbase eq "ups" ) {
    $inputdir = $sourcedir;
    ##print DIAG "set_dev_products debug info: have the old setup_for_development\n";
    my $errfl2 = "problem_report2";
    open(ERR2, "> $errfl2") or die "Couldn't open $errfl2";
    print ERR2 "\n";
    print ERR2 "unsetenv_ CETPKG_NAME\n";
    print ERR2 "unsetenv_ CETPKG_VERSION\n";
    print ERR2 "unsetenv_ CETPKG_QUAL\n";
    print ERR2 "unsetenv_ CETPKG_TYPE\n";
    print ERR2 "unsetenv_ CETPKG_CC\n";
    print ERR2 "unsetenv_ CETPKG_CXX\n";
    print ERR2 "unsetenv_ CETPKG_FC\n";
    print ERR2 "echo \"ERROR: \"\n";
    print ERR2 "echo \"ERROR: you have an old copy of setup_for_development\"\n";
    print ERR2 "echo \"ERROR: please issue the following command\"\n";
    print ERR2 "echo \"ERROR: cp \$CETBUILDTOOLS_DIR/templates/setup_for_development.template $inputdir/setup_for_development\"\n";
    print ERR2 "echo \"ERROR: \"\n";
    print ERR2 "return 1\n";
    close(ERR2);
    print "$errfl2\n";
    exit 0;
} else {
    $inputdir = $sourcedir."/ups";
}
##print DIAG "set_dev_products debug info: source dir is $sourcedir\n";
##print DIAG "set_dev_products debug info: input dir is $inputdir\n";

my $pfile=$inputdir."/product_deps";

if ( check_for_old_product_deps( $pfile ) ) {
    print DIAG "WARNING: you appear to be using an old product_deps with cetbuildtools v4 or later\n";
    print DIAG "WARNING: please issue the following command\n";
    print DIAG "WARNING: migrate-package '$ENV{CETPKG_SOURCE}'\n";
}

# as of cetbuildtools v4_13_00, UPS_OVERRIDE is only set by set_dev_products
my $sfile=$inputdir."/setup_for_development";
if ( check_for_old_setup_files( $sfile ) ) {
    my $errfl3 = "problem_report3";
    open(ERR3, "> $errfl3") or die "Couldn't open $errfl3";
    print ERR3 "\n";
    print ERR3 "unsetenv_ CETPKG_NAME\n";
    print ERR3 "unsetenv_ CETPKG_VERSION\n";
    print ERR3 "unsetenv_ CETPKG_QUAL\n";
    print ERR3 "unsetenv_ CETPKG_TYPE\n";
    print ERR3 "unsetenv_ CETPKG_CC\n";
    print ERR3 "unsetenv_ CETPKG_CXX\n";
    print ERR3 "unsetenv_ CETPKG_FC\n";
    print ERR3 "echo \"ERROR: \"\n";
    print ERR3 "echo \"ERROR: you have an old copy of setup_for_development\"\n";
    print ERR3 "echo \"ERROR: please issue the following command\"\n";
    print ERR3 "echo \"ERROR: cp \\\$CETBUILDTOOLS_DIR/templates/setup_for_development.template $inputdir/setup_for_development\"\n";
    print ERR3 "echo \"ERROR: \"\n";
    print ERR3 "return 1\n";
    close(ERR3);
    print "$errfl3\n";
    exit 0;
}
$sfile=$inputdir."/setup_deps";
if ( -e $sfile ) {
if ( check_for_old_setup_files( $sfile ) ) {
    my $errfl4 = "problem_report4";
    open(ERR4, "> $errfl4") or die "Couldn't open $errfl4";
    print ERR4 "\n";
    print ERR4 "unsetenv_ CETPKG_NAME\n";
    print ERR4 "unsetenv_ CETPKG_VERSION\n";
    print ERR4 "unsetenv_ CETPKG_QUAL\n";
    print ERR4 "unsetenv_ CETPKG_TYPE\n";
    print ERR4 "unsetenv_ CETPKG_CC\n";
    print ERR4 "unsetenv_ CETPKG_CXX\n";
    print ERR4 "unsetenv_ CETPKG_FC\n";
    print ERR4 "echo \"ERROR: \"\n";
    print ERR4 "echo \"ERROR: you have an old copy of setup_deps\"\n";
    print ERR4 "echo \"ERROR: please issue the following command\"\n";
    print ERR4 "echo \"ERROR: cp \\\$CETBUILDTOOLS_DIR/templates/setup_deps.template $inputdir/setup_deps\"\n";
    print ERR4 "echo \"ERROR: \"\n";
    print ERR4 "return 1\n";
    close(ERR4);
    print "$errfl4\n";
    exit 0;
}
}

# as of cetbuildtools v4_17_00, use noarch instead of simple for a null flavored product
$sfile=$inputdir."/setup_for_development";
if ( check_for_old_noarch_setup_file( $sfile ) ) {
    my $errfl5 = "problem_report5";
    open(ERR5, "> $errfl5") or die "Couldn't open $errfl5";
    print ERR5 "\n";
    print ERR5 "unsetenv_ CETPKG_NAME\n";
    print ERR5 "unsetenv_ CETPKG_VERSION\n";
    print ERR5 "unsetenv_ CETPKG_QUAL\n";
    print ERR5 "unsetenv_ CETPKG_TYPE\n";
    print ERR5 "unsetenv_ CETPKG_CC\n";
    print ERR5 "unsetenv_ CETPKG_CXX\n";
    print ERR5 "unsetenv_ CETPKG_FC\n";
    print ERR5 "echo \"ERROR: \"\n";
    print ERR5 "echo \"ERROR: you have an old copy of setup_for_development\"\n";
    print ERR5 "echo \"ERROR: please issue the following command\"\n";
    print ERR5 "echo \"ERROR: cp \\\$CETBUILDTOOLS_DIR/templates/setup_for_development.noarch.template $inputdir/setup_for_development\"\n";
    print ERR5 "echo \"ERROR: \"\n";
    print ERR5 "return 1\n";
    close(ERR5);
    print "$errfl5\n";
    exit 0;
}

my ($product, $version, $default_ver, $default_qual, $have_fq) = get_parent_info( $pfile );

my $tmpfl = $builddir."/".$product."-".$version;
open($set_dev_products::TSET, "> $tmpfl") or die "Couldn't open $tmpfl";

my ($plen, $plist_ref, $dqlen, $dqlist_ref) = get_product_list( $pfile );
my @plist=@$plist_ref;
my @dqlist=@$dqlist_ref;
my ($ndeps, @qlist) = get_qualifier_list( $pfile, $set_dev_products::TSET );

if ( $qual ) {
  $qual = $qual.":".$dop;
  $qdir = $qdir."-".$dop;
} else {
  my $dq = find_default_qual( $pfile );
  if ( $dq ) {
    $qual = $dq.":".$dop;
    $qdir = $dq."-".$dop;
  } elsif ( $noarch ) {
    $qual = "-nq-";
  } else {
    my $errfl2 = $builddir."/error-".$product."-".$version;
    open(ERR2, "> $errfl2") or die "Couldn't open $errfl2";
    print ERR2 "\n";
    print ERR2 "unsetenv_ CETPKG_NAME\n";
    print ERR2 "unsetenv_ CETPKG_VERSION\n";
    print ERR2 "unsetenv_ CETPKG_QUAL\n";
    print ERR2 "unsetenv_ CETPKG_TYPE\n";
    print ERR2 "unsetenv_ CETPKG_CC\n";
    print ERR2 "unsetenv_ CETPKG_CXX\n";
    print ERR2 "unsetenv_ CETPKG_FC\n";
    print ERR2 "echo \"ERROR: no qualifiers specified\"\n";
    print ERR2 "echo \"ERROR: add a defaultqual line to $pfile\"\n";
    print ERR2 "echo \"ERROR: or specify the qualifier(s) on the command line\"\n";
    print ERR2 "echo \"USAGE: set_dev_products <input-directory> <outupt-directory. <-d|-o|-p> <qualifiers>\"\n";
    print ERR2 "return 1\n";
    close(ERR2);
    print "$errfl2\n";
    exit 0;
  }
}
#print DIAG "set_dev_products debug info: qual $qual\n";

# Temporary variable connected as a filehandle.
open( $set_dev_products::SETUP_CMDS, ">", \$setup_cmds) or
  die "Could not open memory stream to variable.";

# are there products without listed qualifiers?
foreach $i ( 0 .. $plen ) {
  my $p_has_qual = 0;
  if( $ndeps ) {
  foreach $j ( 1 .. $ndeps ) {
    if( $plist[$i][0] eq $qlist[0][$j] ) {
        ++$p_has_qual;
    }
  }
  }
  if ( $p_has_qual == 0 ) {
    print_setup_noqual( $plist[$i][0], $plist[$i][1], $plist[$i][3], $set_dev_products::SETUP_CMDS );
  }
}
# now loop over the qualifier list
my $match = 0;
my $compiler;
foreach $i ( 1 .. $#qlist ) {
  if ( $qlist[$i][0] eq $qual ) {
    $match++;
    foreach $j ( 1 .. $ndeps ) {
      if ($qlist[0][$j] eq "compiler") { # Compiler suite keyword
        if ($qlist[$i][$j]) {
          if ($qlist[$i][$j] eq '-') {
            undef $compiler;
          } else {
            $compiler = $qlist[$i][$j];
          }
          next;
        }
      }
      my $piter = -1;
      foreach $k ( 0 .. $plen ) {
        if( $plist[$k][0] eq $qlist[0][$j] ) { 
          if ( $plist[$k][2] ) {
            if ( match_qual( $plist[$k][2], $qlist[$i][0] ) ) {
              $piter=$k;
            }
          } else {
            $piter=$k;
          }
        }
      }
      if ( $piter < 0 ) {
        print DIAG "ERORR: failed to match $qlist[0][$j] in product list \n";
      }
      if ( $qlist[$i][$j] eq "-" ) {
      } elsif ( $qlist[$i][$j] eq "-nq-" ) {
        print_setup_noqual( $plist[$piter][0], $plist[$piter][1], $plist[$piter][3], $set_dev_products::SETUP_CMDS );
        #print $set_dev_products::SETUP_CMDS "setup -B $plist[$piter][0] $plist[$piter][1] \n";
      } elsif ( $qlist[$i][$j] eq "-b-" ) {
        print_setup_noqual( $plist[$piter][0], $plist[$piter][1], $plist[$piter][3], $set_dev_products::SETUP_CMDS );
        #print $set_dev_products::SETUP_CMDS "setup -B $plist[$piter][0] $plist[$piter][1] \n";
      } else {
        my @qwords = split(/:/,$qlist[$i][$j]);
        my $ql="+".$qwords[0];
        foreach $j ( 1 .. $#qwords ) {
          $ql = $ql.":+".$qwords[$j];
        }
        print_setup_qual( $plist[$piter][0], $plist[$piter][1], $ql, $plist[$piter][3], $set_dev_products::SETUP_CMDS );
        #print $set_dev_products::SETUP_CMDS "setup -B $plist[$piter][0] $plist[$piter][1] -q $ql \n";
      }
    }
    last;
  }
}

close($set_dev_products::SETUP_CMDS);

if (!$compiler) {
  my @quals = split /:/, $qual;
  if (grep /^(e|gcc)\d+$/, @quals) {
    $compiler = "gcc";
  } else {
    $compiler = "cc"; # Native.
  }
}

# find the only_for_build products
my $onlyForBuild="";
foreach $i ( 0 .. $plen ) {
  if (( $plist[$i][3] ) && ( $plist[$i][3] eq "only_for_build" )) {
    $onlyForBuild=$plist[$i][0].";".$onlyForBuild;
  }
}

my $cetfl = cetpkg_info_file($product,
                          $version,
                          $default_ver,
                          $qual,
                          $type,
                          $sourcedir,
                          $builddir,
                          $compiler_table->{$compiler}->{CC},
                          $compiler_table->{$compiler}->{CXX},
                          $compiler_table->{$compiler}->{FC},
			  $onlyForBuild,
                         );

print $set_dev_products::TSET "tnotnull UPS_OVERRIDE || setenv UPS_OVERRIDE ''\n";
print $set_dev_products::TSET "expr \"x \$UPS_OVERRIDE\" : '.* -[^- 	]*B' >/dev/null || setenv UPS_OVERRIDE \"\$UPS_OVERRIDE -B\"\n";
print $set_dev_products::TSET "setenv CETPKG_NAME $product\n";
print $set_dev_products::TSET "setenv CETPKG_VERSION $version\n";
if ( $noarch ) {
  print $set_dev_products::TSET "unsetenv_ CETPKG_QUAL\n";
  print $set_dev_products::TSET "unsetenv_ CETPKG_TYPE\n";
  print $set_dev_products::TSET "unsetenv_ CETPKG_CC\n";
  print $set_dev_products::TSET "unsetenv_ CETPKG_CXX\n";
  print $set_dev_products::TSET "unsetenv_ CETPKG_FC\n";
} else {
  print $set_dev_products::TSET "setenv CETPKG_QUAL $qual\n";
  print $set_dev_products::TSET "setenv CETPKG_TYPE $type\n";
  print $set_dev_products::TSET "setenv CETPKG_CC $compiler_table->{${compiler}}->{CC}\n";
  print $set_dev_products::TSET "setenv CETPKG_CXX $compiler_table->{${compiler}}->{CXX}\n";
  print $set_dev_products::TSET "setenv CETPKG_FC $compiler_table->{${compiler}}->{FC}\n";
}
print $set_dev_products::TSET "setup -B cetpkgsupport \n";
print $set_dev_products::TSET "test \"\$?\" = 0 || set_ setup_fail=\"true\"\n";
my $num_for_table=-1;
foreach $i ( 0 .. $plen ) {
  if (( $plist[$i][3] ) && ( $plist[$i][3] eq "only_for_build" )) {
    if( $plist[$i][0] eq "cetbuildtools" ) {
    } else {
      print $set_dev_products::TSET "setup -B $plist[$i][0] $plist[$i][1]\n";
      print $set_dev_products::TSET "test \"\$?\" = 0 || set_ setup_fail=\"true\"\n";
      ##print $set_dev_products::TSET " echo \$setup_fail \n";
    }
  } else {
    ++$num_for_table;
  }
}

# Now write the setup commands.
print $set_dev_products::TSET $setup_cmds;

# allow for the case where there are no dependencies
# a bit more complicated since only_for_build products are now in the dependency list
if ( $match == 0 ) {
   if( $num_for_table < 0 ) {
     #print "this package has no dependencies\n";
   } else {
     print $set_dev_products::TSET "\n";
     print $set_dev_products::TSET "echo \"ERROR: failed to find any dependent products for $product $version -q $qual\"\n";
     print $set_dev_products::TSET "echo \"       The following qualifier combinations are recognized:\"\n";
     foreach $i ( 1 .. $#qlist ) {
	 print $set_dev_products::TSET "echo \"         $qlist[$i][0] \"\n";
     }
     print $set_dev_products::TSET "return 1\n";
     print $set_dev_products::TSET "\n";
   }
}

close($set_dev_products::TSET);
print "$tmpfl\n";
close(DIAG);

exit 0;

