#!/bin/env perl
#
# setup products for the build environment
# use product_deps and qualifier_deps

# we need to know the qualifiers
# -d, -o, or -p and 1-2 other qualifiers

# cetbuildtools must already be setup by setup_for_development
# create a temporary file and return the temporary file name for use by setup_for_development

use File::Basename;
use lib dirname($0);

if( $#ARGV < 2 ) {
    $errfl1 = "problem_report";
    open(ERR1, "> $errfl1") or die "Couldn't open $errfl1";
    print ERR1 "\n";
    print ERR1 "unsetenv_ CETPKG_NAME\n";
    print ERR1 "unsetenv_ CETPKG_VERSION\n";
    print ERR1 "unsetenv_ CETPKG_QUAL\n";
    print ERR1 "unsetenv_ CETPKG_TYPE\n";
    print ERR1 "echo \"ERROR: directory and qualifiers not specified\"\n";
    print ERR1 "echo \"USAGE: set_dev_products <input-directory> <-d|-o|-p> <qualifiers>\"\n";
    print ERR1 "return 1\n";
    close(ERR1);
    print "$errfl1\n";
    exit 0;
}

$inputdir = $ARGV[0];
$builddir = $ARGV[1];
$simple = "";
for $i ( 2 .. $#ARGV ) {
    if( $ARGV[$i] eq "-d" ) {
      $dop = "debug";
      $type = "Debug";
    } elsif( $ARGV[$i] eq "-o" ) {
      $dop = "opt";
      $type = "Opt";
    } elsif( $ARGV[$i] eq "-p" ) {
      $dop = "prof";
      $type = "Prof";
    } elsif( $ARGV[$i] eq "simple" ) {
      $simple = "true";
    } else {
      $qual = $qual.$ARGV[$i].":";
      $qdir = $qdir.$ARGV[$i]."-";
    }
}

require parse_deps;

$pfile=$inputdir."/product_deps";

($product, $version, $default_qual, %phash) = parse_product_list( $pfile );

$tmpfl = $builddir."/".$product."-".$version;
open(TSET, "> $tmpfl") or die "Couldn't open $tmpfl";

($ndeps, @qlist) = parse_qualifier_list( $pfile, TSET );

if ( $qual ) {
  $qual = $qual.$dop;
  $qdir = $qdir.$dop;
} else {
  $dq = find_default_qual( $pfile );
  if ( $dq ) {
    $qual = $dq.":";
    $qdir = $dq."-";
    $qual = $qual.$dop;
    $qdir = $qdir.$dop;
  } elsif ( $simple ) {
    $qual = "-nq-";
  } else {
    $errfl2 = $builddir."/error-".$product."-".$version;
    open(ERR2, "> $errfl2") or die "Couldn't open $errfl2";
    print ERR2 "\n";
    print ERR2 "unsetenv_ CETPKG_NAME\n";
    print ERR2 "unsetenv_ CETPKG_VERSION\n";
    print ERR2 "unsetenv_ CETPKG_QUAL\n";
    print ERR2 "unsetenv_ CETPKG_TYPE\n";
    print ERR2 "echo \"ERROR: no qualifiers specified\"\n";
    print ERR2 "echo \"ERROR: add a defaultqual line to $pfile\"\n";
    print ERR2 "echo \"ERROR: or specify the qualifier(s) on the command line\"\n";
    print ERR2 "echo \"USAGE: set_dev_products <input-directory> <-d|-o|-p> <qualifiers>\"\n";
    print ERR2 "return 1\n";
    close(ERR2);
    print "$errfl2\n";
    exit 0;
  }
}

$cetfl = cetpkg_info_file( $product, $version, $qual, $type );

$match = 0;
print TSET "setenv UPS_OPTIONS -B\n";
print TSET "setenv CETPKG_NAME $product\n";
print TSET "setenv CETPKG_VERSION $version\n";
if ( $simple ) {
  print TSET "unsetenv_ CETPKG_QUAL\n";
  print TSET "unsetenv_ CETPKG_TYPE\n";
} else {
  print TSET "setenv CETPKG_QUAL $qual\n";
  print TSET "setenv CETPKG_TYPE $type\n";
}
print TSET "setup cetpkgsupport \n";
foreach $i ( 1 .. $#qlist ) {
  if ( $qlist[$i][0] eq $qual ) {
    $match++;
    foreach $j ( 1 .. $ndeps ) {
      if ( $qlist[$i][$j] eq "-" ) {
      } elsif ( $qlist[$i][$j] eq "-nq-" ) {
	print TSET "setup -B $qlist[0][$j] $phash{$qlist[0][$j]} \n";
      } elsif ( $qlist[$i][$j] eq "-b-" ) {
	print TSET "setup -B $qlist[0][$j] $phash{$qlist[0][$j]} \n";
      } else {
	@qwords = split(/:/,$qlist[$i][$j]);
	$ql="+".$qwords[0];
	foreach $j ( 1 .. $#qwords ) {
	  $ql = $ql.":+".$qwords[$j];
	}
	print TSET "setup -B $qlist[0][$j] $phash{$qlist[0][$j]} -q $ql \n";
      }
    }
  }
}
if ( $match == 0 ) {
   print TSET "\n";
   print TSET "echo \"ERROR: failed to find any dependent products for $product $version -q $qual\"\n";
   print TSET "echo \"       The following qualifier combinations are recognized:\"\n";
   foreach $i ( 1 .. $#qlist ) {
       print TSET "echo \"         $qlist[$i][0] \"\n";
   }
   print TSET "return 1\n";
   print TSET "\n";
}


close(TSET);
print "$tmpfl\n";

exit 0;

