#!/bin/bash

shopt -s extglob

function usage() {
  cat <<EOF
usage: ${0##*/} [<options>] [-d <topdir>] [-o <outfile>]"

Options:

  -D
     Show external dependencies also.

  -h
     This help.

  -v
     Verbose output.

Post-processing:

Output is in the graphviz, "dot" format. Examples of post-processing:

* Basic graph (could be complicated).

  dot -Tpng -o out.png in.dot

* Apply transitive reduction to graph prior to main processing.

  tred in.dot | dot -Tpng -o out.dot
EOF
}

function find_paths_helper() {
  local prefix="${1}"
  find . \( \( -name .git -o -name .svn -o -name CVS -o -name test -o -name unittest -o -name java -o -name job \) -prune \) -o \
         -type f \
         \( -path "*/${prefix}CMakeLists.txt" -o \
            -path "*/${prefix}SConscript" -o \
            -path "*/${prefix}GNUmakefile" -o \
            -path "*/${prefix}[Mm]akefile" \) -printf "%P\n" | \
    sed -e "s&${prefix}"'/\{0,1\}\(CMakeLists\.txt\|SConscript\|\(GNUm\|[Mm]\)akefile\)$&&'
}

function find_int_packages() {
  local prefix
  find . -mindepth 1 -maxdepth 1 -type d -printf "%P\n" | while read dir; do (
    { [[ "$dir" == "CVS" ]] || \
      [[ "$dir" == "."* ]] || \
      [[ "$dir" = "bin" ]] || \
      [[ "$dir" = "doc" ]] || \
      [[ "$dir" = "include" ]] || \
      [[ "$dir" = "job" ]] || \
      [[ "$dir" = "lib" ]] || \
      [[ "$dir" = "man" ]] || \
      [[ "$dir" = "results" ]] || \
      [[ "$dir" = "test" ]] || \
      [[ "$dir" = "tmp" ]] || \
      [[ "$dir" = "ups" ]]; } && continue
    cd "$dir"
    if [[ -d "cxx/src" ]]; then
      prefix="cxx/src/"
    elif [[ -d "src" ]]; then
      prefix="src/"
    else
      prefix=""
    fi
    echo "$dir" >> "${TMP}.int_packages.tmp"
    find_paths_helper "$prefix" | while read subdir; do
      if [[ -n "${subdir}" ]]; then
        echo "${dir}/${subdir}"
      else
        echo "${dir}"
      fi
    done
  ) done
  sort -u "${TMP}.int_packages.tmp" > "${TMP}.int_packages"
}

while getopts :Dd:ho:v OPT; do
    case $OPT in
  D)
      want_all_deps=1
      ;;
	d)
	    topdir="$OPTARG"
	    ;;
  h)
      usage
      exit 1
      ;;
	o)
	    outfile="$OPTARG"
	    ;;
  v)
      verbose=1
      ;;
	*)
      usage
	    exit 2
    esac
done
shift $[ OPTIND - 1 ]

[[ -n "$outfile" ]] && exec>$outfile

cd "$topdir" || { echo "Unable to cd to \"$topdir\"" 1>&2; exit 1; }

TMP=`mktemp "${TMPDIR:-/tmp}/code-dep-graph.XXXXXXXXXX"`
[[ -n "$TMP" ]] || { echo "ERROR: could not open temporary file for write" 1>&2; exit 1; }
trap "rm -f \"$TMP\"* 2>/dev/null" EXIT

cat <<EOF
digraph {
  node [ shape=rectangle ]
EOF
find_int_packages > "$TMP"
cat "${TMP}" | while read path; do
  ( cd $path
    package=${path}
    echo "INFO: Examining package $package." 1>&2 
    declare -a dirs=( . src inc include interface )
    ack -l -f -n "${dirs[@]}" </dev/null 2>/dev/null | \
     xargs grep -he '^[ \t]*#include[ \t]*"' \
                -e '^[ \t]*#include[ \t]*<.*/.*>' | \
     grep -e / | \
     sed -e 's/^[ \t]*#include[ \t]*["<]\(.*\)[">].*$/\1/' | \
     grep -e '/' | \
     sed -e 's/interface\///' \
         -e 's/inc\///' \
         -e 's/include\///' \
         -e 's/\/[^\/]*$//' \
         -e 's/\/src$//' \
         -e 's/\/cxx$//' \
         -e 's/\/detail$//' | \
     sort -u | while read dep; do
       if [[ "$package" == "$dep" ]]; then
         continue # Self-dependency
       fi
       (( ${verbose:-0} )) && echo "INFO: -> Found dependency $dep in $package." 1>&2 
       dep_top=${dep%%/*}
       if ! grep -e "^${dep_top}\$" "${TMP}.int_packages" >/dev/null 2>&1; then
         if (( ${want_all_deps:-0} ))
         then
           echo "${dep}" >> "$TMP.deps"
         else
           (( ${verbose:-0} )) && echo "INFO: Ignoring external dependency $package -> $dep." 1>&2
           continue
         fi
       fi
       if [[ "$package_top" == "FWCore" ]]; then
         old_fw=1 # Special instructions
       fi
       echo "  \"$package\" -> \"$dep\";"
     done
  ); done

[[ -f "$TMP.deps" ]] && sort -u "$TMP.deps" | while read dep; do
  echo "  \"$dep\" [ shape=rectangle; style=\"rounded,filled\"; color=pink; ]"
done

if (( ${old_fw:-0} )); then
cat <<EOF

  { rank = 0;
    FWCoreMessageLogger;
    FWCoreParameterSet;
  }
  { rank = 1;
    FWCoreVersion;
  }
  { rank = 2;
    FWCoreUtilities;
  }
  { rank = 3;
    FWCorePluginManager;
    DataFormatsProvenance;
  }
  { rank = 4;
    FWCoreRootAutoLibraryLoader;
    FWCorePrescaleService;
    DataFormatsCommon;
  }
  { rank = 5;
    FWCoreFramework;
    FWCoreServices;
  }
  { rank = 6;
    FWCoreServiceRegistry;
  }
  { rank = 7;
    FWCoreMessageService;
    FWCoreCatalog;
    IOPoolCommon;
  }
  { rank = 8;
    FWCoreSources;
  }
  { rank = 9;
    IOPoolInput;
    FWCoreModules;
    IOPoolOutput;
    DataFormatsTestObjects;
    DataFormatsWrappedStdDictionaries;
  }
EOF
else
cat <<EOF
EOF
fi
cat <<EOF
}
EOF
